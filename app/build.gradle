apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'


android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.wangchao.testproject"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    packagingOptions {
        doNotStrip "*/armeabi/*.so"
        doNotStrip "*/armeabi-v7a/*.so"
        doNotStrip "*/arm64-v8a/*.so"
        doNotStrip "*/x86/*.so"
        doNotStrip "*/x86_64/*.so"
        doNotStrip "*/mips/*.so"
        doNotStrip "*/mips64/*.so"
        //...

        exclude 'META-INF/proguard/androidx-annotations.pro'
    }


}
//在app的build.gradle中添加以下代码
project.configurations.all{
    resolutionStrategy.eachDependency{details->
        if(details.requested.group=='com.android.support'
                && !details.requested.name.contains('multidex')){
            details.useVersion"28.0.0"
        }
    }
}



task hello{
    doLast {
        println 'hello world!'
        int s = 1
        int a = 2
        println(s + a)
        //单引号不能对字符串里的表达式做运算
        def str1 = '单引号'
        def str2 = "双引号"

        println str1.getClass()
        print str2.getClass()

    }
}


//集合list定义
task printList{
    def numList = [1,2,3,4,5]

    println numList[1]
    println numList[-2]
    println "each demo----------->>>"
    //代码块作为参数传递
    numList.each {
        println it
    }

}


task printMap{
    def map1 = ['width':1024, 'height':768]

    println map1.height
    println map1.width

}


//方法调用

task invokeMethod {
    method1 1 , 2
}

def method1(int a, int b){
    println("加法-----------")
    println a + b
}


task helloClosure {
    println("闭包-----------------start")
    //使用自定义的闭包
    customEach{
        //println这个相当于是customEach的参数 这有点类似于kt的高阶函数，c语言的函数指针
        println(it)
    }
    println("闭包-----------------end")
}

def customEach(closure){
    for (int i in 1..10) {
        closure(i)
    }
}


//apply 会根据文件的导入点来的顺序来执行，比如这里就比较靠后执行了
apply from: 'rules.gradle'




dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.0.7'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    implementation 'com.github.bumptech.glide:compiler:4.7.1'
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.7.1'
    implementation 'org.greenrobot:eventbus:3.2.0'

    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    compile(name:'mytest-debug', ext:'aar')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation project(path: ':kt_module')
    implementation 'com.tencent:mmkv-static:1.1.1'
        debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'
        releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'

}
repositories {
    mavenCentral()
}
